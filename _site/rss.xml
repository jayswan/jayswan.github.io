<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Unroutable</title>
        <description>Unroutable - Jay Swan</description>
        <link>http://jayswan.github.io</link>
        <atom:link href="http://jayswan.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Mon, 07 Sep 2015 19:43:36 -0600</lastBuildDate>
        <pubDate>Mon, 07 Sep 2015 19:43:36 -0600</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Installing netmiko on Windows</title>
                <description>&lt;h1 id=&quot;test-post&quot;&gt;Test Post&lt;/h1&gt;
&lt;p&gt;Some text here.&lt;/p&gt;

&lt;p&gt;Some text there.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
some code here
&lt;/code&gt;&lt;/p&gt;
</description>
                <link>http://jayswan.github.io/2015/09/06/test-post</link>
                <guid>http://jayswan.github.io/2015/09/06/test-post</guid>
                <pubDate>Sun, 06 Sep 2015 00:00:00 -0600</pubDate>
        </item>

        <item>
                <title>Installing netmiko on Windows</title>
                <description>&lt;a href=&quot;https://github.com/ktbyers/netmiko&quot; target=&quot;_blank&quot;&gt;Netmiko &lt;/a&gt;is a Python module by &lt;a href=&quot;https://twitter.com/kirkbyers&quot; target=&quot;_blank&quot;&gt;Kirk Byers&lt;/a&gt; that provides a wrapper around the &lt;a href=&quot;http://www.paramiko.org/&quot; target=&quot;_blank&quot;&gt;Paramiko &lt;/a&gt;SSH module for doing screen scraping and CLI automation on network devices.&lt;br /&gt;&lt;br /&gt;Paramiko has some dependencies that make installation on Windows a tad tricky. Here&#39;s a quick way to get it done:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Install &lt;a href=&quot;https://store.continuum.io/cshop/anaconda/&quot; target=&quot;_blank&quot;&gt;Anaconda&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;From the Anaconda shell, run &quot;conda install paramiko&quot;.&lt;/li&gt;&lt;li&gt;From the Anaconda shell, run &quot;pip install scp&quot;.&lt;/li&gt;&lt;li&gt;Install &lt;a href=&quot;https://www.git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;git for Windows&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Clone netmiko with &quot;git clone &lt;a href=&quot;https://github.com/ktbyers/netmiko&quot;&gt;https://github.com/ktbyers/netmiko&lt;/a&gt;&quot;&lt;/li&gt;&lt;li&gt;cd into the netmiko directory and run &quot;python setup.py install&quot;.&lt;/li&gt;&lt;/ol&gt;Done! Screen scrape away, and don&#39;t forget to hound your vendors for real APIs... :-)</description>
                <link>http://jayswan.github.io/2015/07/15/installing-netmiko-on-windows</link>
                <guid>http://jayswan.github.io/2015/07/15/installing-netmiko-on-windows</guid>
                <pubDate>Wed, 15 Jul 2015 13:12:00 -0600</pubDate>
        </item>

        <item>
                <title>Extracting Traffic from Rolling Capture Files</title>
                <description>Every so often I need to extract a subset of traffic from a set of rolling timestamped pcap files. One common place I do this is with &lt;a href=&quot;https://github.com/Security-Onion-Solutions/security-onion&quot; target=&quot;_blank&quot;&gt;Security Onion&lt;/a&gt;; one of the great features of SO is its full-packet-capture feature: you can easily pivot from Snort, Suricata, or Bro logs to a full packet capture view, or download the associated pcap file.&lt;br /&gt;&lt;br /&gt;But what if you don&#39;t have an associated alert or Bro log entry? Or if you&#39;re doing pcap on some system that&#39;s not as user-friendly as Security Onion, but nonetheless supports rolling captures?&lt;br /&gt;&lt;br /&gt;The way I usually do this is with &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;find &lt;/span&gt;and &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;xargs&lt;/span&gt;. Here&#39;s an example of my most common workflow, using timestamps as the filtering criteria for &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;find&lt;/span&gt;:&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&amp;gt; find . -newerct &quot;16:07&quot; ! -newerct &quot;16:10&quot; | xargs -I {} tcpdump -r {} -w /tmp/{} host 8.8.8.8&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&amp;gt; cd /tmp&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&amp;gt; mergecap -w merged.pcap *.pcap&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Translated:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Find all files in the current directory created after 16:07 but not created after 16:10. This requires GNU &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;find&lt;/span&gt; 4.3.3 or later. It supports many different time and date formats.&lt;/li&gt;&lt;li&gt;Using &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;xargs&lt;/span&gt;, filter each file with the &quot;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;host 8.8.8.8&lt;/span&gt;&quot; BPF expression and write it to &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;/tmp&lt;/span&gt; with the same filename.&lt;/li&gt;&lt;li&gt;Merge all the .pcap files in &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;/tmp&lt;/span&gt; into &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;merged.pcap&lt;/span&gt;.&lt;/li&gt;&lt;/ol&gt;You can easily modify this workflow to fit other use cases. </description>
                <link>http://jayswan.github.io/2015/07/14/extracting-traffic-from-rolling-capture</link>
                <guid>http://jayswan.github.io/2015/07/14/extracting-traffic-from-rolling-capture</guid>
                <pubDate>Tue, 14 Jul 2015 11:35:00 -0600</pubDate>
        </item>

        <item>
                <title>More ADN (Awk Defined Networking)</title>
                <description>Want to know how many IPv4 nodes are in each of your VLANs? Use ADN:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;ssh myswitch &#39;sh arp | i Vlan&#39; | awk &#39;{print $NF}&#39; | sort | uniq -c | sort -rn&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 79 Vlan38&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 65 Vlan42&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 58 Vlan34&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 22 Vlan36&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 21 Vlan32&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 20 Vlan40&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 9 Vlan3&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 7 Vlan8&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5 Vlan6&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5 Vlan204&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5 Vlan203&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5 Vlan2&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4 Vlan74&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3 Vlan82&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3 Vlan4&lt;/span&gt;&lt;/span&gt;</description>
                <link>http://jayswan.github.io/2015/05/15/more-adn-awk-defined-networking</link>
                <guid>http://jayswan.github.io/2015/05/15/more-adn-awk-defined-networking</guid>
                <pubDate>Fri, 15 May 2015 14:52:00 -0600</pubDate>
        </item>

        <item>
                <title>ADN - Awk Defined Networking</title>
                <description>Because I have yet to transition to a completely software-defined network in which everything configures itself (wink wink), I still have to do tasks like bulk VLAN changes.&lt;br /&gt;&lt;br /&gt;Thanks to a recent innovation called ADN, or &quot;AWK Defined Networking&quot;, I can do this in a shorter time window that the average bathroom break. For example, I just had a request to change all ports on a large access switch stack that&amp;nbsp; are currently in VLAN 76 to VLAN 64:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;# &lt;b&gt;ssh switch_name.foo.com &#39;show int status | i _76_&#39; | grep Gi | awk &#39;{print &quot;int &quot;,$1,&quot;\n&quot;,&quot;description PC/Phone&quot;,&quot;\n&quot;,&quot;switchport access vlan 64&quot;}&#39;&lt;/b&gt;&lt;br /&gt;Password: ***&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;int&amp;nbsp; Gi1/0/25&lt;br /&gt;&amp;nbsp;description PC/Phone&lt;br /&gt;&amp;nbsp;switchport access vlan 64&lt;br /&gt;int&amp;nbsp; Gi1/0/26&lt;br /&gt;&amp;nbsp;description PC/Phone&lt;br /&gt;&amp;nbsp;switchport access vlan 64&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;[many more deleted] &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then I copied and pasted the results into config mode. Back to lounging on the beach.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ferd.ca/awk-in-20-minutes.html&quot; target=&quot;_blank&quot;&gt;Not even any Python skills required!&lt;/a&gt;</description>
                <link>http://jayswan.github.io/2015/04/24/adn-awk-defined-networking</link>
                <guid>http://jayswan.github.io/2015/04/24/adn-awk-defined-networking</guid>
                <pubDate>Fri, 24 Apr 2015 10:39:00 -0600</pubDate>
        </item>

        <item>
                <title>Quick Example: Elasticsearch Bulk Index API with Python</title>
                <description>A &lt;a href=&quot;https://gist.github.com/jayswan/a8d9920ef74516a02fe1&quot; target=&quot;_blank&quot;&gt;quick example&lt;/a&gt; that shows how to use &lt;a href=&quot;http://elasticsearch-py.readthedocs.org/en/master/helpers.html#elasticsearch.helpers.bulk&quot; target=&quot;_blank&quot;&gt;Elasticsearch bulk indexing from the Python client&lt;/a&gt;. This is dramatically faster than indexing documents one at a time in a loop with the index() method.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/jayswan/a8d9920ef74516a02fe1.js&quot;&gt;&lt;/script&gt;</description>
                <link>http://jayswan.github.io/2015/03/26/quick-example-elasticsearch-bulk-index</link>
                <guid>http://jayswan.github.io/2015/03/26/quick-example-elasticsearch-bulk-index</guid>
                <pubDate>Thu, 26 Mar 2015 20:17:00 -0600</pubDate>
        </item>

        <item>
                <title>Filtering .raw fields with Python Elasticsearch DSL High-Level Client</title>
                <description>It took me a while to figure out how to search the &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;not_analyzed&lt;/span&gt; &quot;.raw&quot; fields created by Logstash in Elasticsearch indices, using the high-level Python Elasticsearch client. Because keyword arguments can&#39;t have attributes, Python throws an error if you try it the intuitive way (this assumes you&#39;ve already set up a client as &lt;b&gt;&lt;i&gt;es&lt;/i&gt;&lt;/b&gt; and an index as &lt;b&gt;&lt;i&gt;i&lt;/i&gt;&lt;/b&gt;, as shown in the &lt;a href=&quot;http://elasticsearch-dsl.readthedocs.org/en/latest/index.html#&quot; target=&quot;_blank&quot;&gt;docs&lt;/a&gt;):&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/jayswan/d4ddd71a35bb5f1ad86f.js&quot;&gt;&lt;/script&gt; Instead, you create a dictionary with your parameters and unpack it using the ** operator:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/jayswan/3a7621d909b15c832cfb.js&quot;&gt;&lt;/script&gt; This produces the Elasticsearch query we want:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/jayswan/c04eee5287cc7cbc5ea1.js&quot;&gt;&lt;/script&gt;</description>
                <link>http://jayswan.github.io/2015/02/28/searching-raw-fields-with-python</link>
                <guid>http://jayswan.github.io/2015/02/28/searching-raw-fields-with-python</guid>
                <pubDate>Sat, 28 Feb 2015 20:27:00 -0700</pubDate>
        </item>

        <item>
                <title>Experimenting with the CSR1000v REST API</title>
                <description>This all started because we occasionally want to block traffic from an IP address or two for a short time. Our firewall is a pain to configure for this sort of thing: adding a drop for a single IP address literally takes 10 minutes. You have to open a fat client, create an object, add the object to a group, save the config, verify the config, push the config, etc.&lt;br /&gt;&lt;br /&gt;I thought that SRTBH (Source-based &lt;a href=&quot;http://www.cisco.com/web/about/security/intelligence/blackhole.pdf&quot; target=&quot;_blank&quot;&gt;Real-Time Black Hole&lt;/a&gt;) implemented by BGP would be the ticket: fast, easy, and theoretically easy to automate with the &lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/routers/csr1000/software/restapi/restapi/RESTAPIintro.html&quot; target=&quot;_blank&quot;&gt;REST API in the Cisco Cloud Services Router 1000v&lt;/a&gt;. SRTBH is a simple and elegant way of dropping selected traffic on BGP speaking routers. In a nutshell: &lt;br /&gt;&lt;ol&gt;&lt;li&gt;You configure a &quot;trigger router&quot; that speaks iBGP with the rest of your BGP-speaking routers (usually your Internet edge or transit routers), but doesn&#39;t participate in traffic forwarding.&lt;/li&gt;&lt;li&gt;On each edge/transit router you configure a static route to null0 for an unused /32, usually 192.0.2.1: &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;ip route 192.0.2.1 255.255.255.255 null0&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;On each edge/transit router you configure loose-mode unicast RPF filtering on your outside interfaces: &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;ip verify source reachable-via any&lt;/span&gt;&lt;/span&gt;. This has a special property: packets from any source for which the uRPF next-hop resolves to Null0 will be dropped.&lt;/li&gt;&lt;li&gt;When you want to drop traffic from a particular host (e.g. 1.1.1.2), you configure a static host route on the trigger router and redistribute it into BGP by matching its tag: &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;ip route 1.1.1.2 255.255.255.255 null0 tag 666&lt;/span&gt;&lt;/span&gt;. &lt;/li&gt;&lt;li&gt;At redistribution, you set its next-hop to 192.0.2.1:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;route-map SRTBH permit 10&lt;br /&gt;&amp;nbsp;description BGP Black Hole &lt;br /&gt;&amp;nbsp;match tag 666&lt;br /&gt;&amp;nbsp;set origin igp&lt;br /&gt;&amp;nbsp;set community no-export&lt;br /&gt;&amp;nbsp;set ip next-hop 192.0.2.1&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;The effect of this is that the edge routers see the iBGP route to the &quot;bad&quot; address as a /32 with a next-hop of 192.0.2.1. Because the next-hop for 192.0.2.1 recursively resolves to null0, the loose uRPF feature drops traffic from the bad host at the edge.&lt;br /&gt;&lt;br /&gt;In my case, I wanted to use the CSR1000v as the trigger router. (At this point, somebody&#39;s thinking &quot;Why not use a Linux BGP daemon?&quot;) That&#39;s a valid approach; I just want to use the CSR1000v. &lt;br /&gt;&lt;br /&gt;I followed the &lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/routers/csr1000/software/configuration/csr1000Vswcfg/RESTAPI.html&quot; target=&quot;_blank&quot;&gt;REST setup instructions&lt;/a&gt;, then wrote a &lt;a href=&quot;https://github.com/jayswan/csr_rest&quot; target=&quot;_blank&quot;&gt;simple CLI tool&lt;/a&gt; to make testing easier. It&#39;s easy enough to test the API with cURL:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;$ curl -X POST https://10.1.1.1:55443/api/v1/auth/token-services -H &quot;Accept:application/json&quot; -u &quot;testuser&quot; -d &quot;&quot; --insecure -3&lt;br /&gt;Enter host password for user &#39;testuser&#39;:&lt;br /&gt;{&quot;kind&quot;: &quot;object#auth-token&quot;, &quot;expiry-time&quot;: &quot;Thu Feb 12 17:24:30 2015&quot;, &quot;token-id&quot;: &quot;xNOvrJh[...]rW3x0=&quot;, &quot;link&quot;: &quot;https://10.1.1.1:55443/api/v1/auth/token-services/2285580579&quot;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;but because the API requires that you obtain a temporary authorization token (demonstrated above) before doing anything interesting, writing the Python tool made sense.&lt;br /&gt;&lt;br /&gt;Then the problems started: the REST API on the CSR1000v doesn&#39;t support tags on static routes. You can&#39;t add them, or even retrieve them. Here&#39;s what happens normally if you retrieve static routes:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;python rest.py --device 10.1.1.1 --user testuser --resource /routing-svc/static-routes&lt;br /&gt;Password:&lt;br /&gt;{u&#39;items&#39;: [{u&#39;admin-distance&#39;: 1,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; u&#39;destination-network&#39;: u&#39;10.0.0.0/8&#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; u&#39;kind&#39;: u&#39;object#static-route&#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; u&#39;next-hop-router&#39;: u&#39;10.30.254.152&#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; u&#39;outgoing-interface&#39;: u&#39;&#39;},&lt;br /&gt;&amp;nbsp;u&#39;kind&#39;: u&#39;collection#static-route&#39;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;If one of the routes has a tag, it throws an error:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;{u&#39;detail&#39;: u&#39; &#39;,&lt;br /&gt;&amp;nbsp;u&#39;error-code&#39;: -1,&lt;br /&gt;&amp;nbsp;u&#39;error-message&#39;: u&quot;invalid literal for int() with base 10: &#39;tag&#39;&quot;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You can&#39;t set tags either. Furthermore, the same thing holds true for static routes with the &quot;name&quot; argument. (Incidentally, the error message seems to indicate that the IOS XE API is written in Python.)&lt;br /&gt;&lt;br /&gt;The problem with this is that without tags, there&#39;s no convenient way to filter the RTBH black hole trigger routes at the time of redistribution. You can&#39;t set route-maps on BGP network statements via the API either, so no joy there.&lt;br /&gt;&lt;br /&gt;The best option to me seems to be to redistribute all static routes, but filter on prefix-length rather than tag:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;route-map SRTBH permit 10&lt;br /&gt;&amp;nbsp;description BGP Black Hole&lt;br /&gt;&amp;nbsp;match ip address prefix-list HOST_ROUTES_ONLY&lt;br /&gt;&amp;nbsp;set origin igp&lt;br /&gt;&amp;nbsp;set community no-export&lt;br /&gt;&amp;nbsp;set ip next-hop 192.0.2.1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But then you have to make sure that you never have any /32s that aren&#39;t trigger routes... a strategy which is prone to configuration mistakes.&lt;br /&gt;&lt;br /&gt;Because SRTBH seems like a natural use-case for API automation, I hope Cisco fixes this soon.&lt;br /&gt;&lt;br /&gt;[added]&lt;br /&gt;Other interesting things I&#39;ve found: the static route configuration API doesn&#39;t allow you to add equal-cost static routes. For example, if I already have a 1.1.1.5/32 route and I add another one, I get a 404:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;python rest.py --device 10.1.1.1 --user testuser --password foo --resource /routing-svc/static-routes --method post --json &#39;{&quot;destination-network&quot;:&quot;1.1.1.5/32&quot;,&quot;outgoing-interface&quot;:&quot;null0&quot;}&#39; --verbose&lt;br /&gt;[snip]&lt;br /&gt;&lt;span style=&quot;background-color: yellow;&quot;&gt;DEBUG:root:got status code: 404&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: yellow;&quot;&gt;DEBUG:root:reponse content: Static route already exists&lt;/span&gt;&lt;br /&gt;got status code: 404 &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The same thing goes for adding other items: I tried adding a name-server twice, and got a similar error. I would think that the API would be idempotent where possible (such as when adding a duplicate nameserver), and require clarifying attributes otherwise. With equal-cost static routes for example, it could throw a 40x unless an extra attribute like &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;{&quot;allow-equal-cost&quot;:true} &lt;/span&gt;&lt;/span&gt;is present in the POST request.</description>
                <link>http://jayswan.github.io/2015/02/12/experimenting-with-csr1000v-rest-api</link>
                <guid>http://jayswan.github.io/2015/02/12/experimenting-with-csr1000v-rest-api</guid>
                <pubDate>Thu, 12 Feb 2015 11:18:00 -0700</pubDate>
        </item>

        <item>
                <title>Pleasing terminal colors on Security Onion</title>
                <description>To get the lovely Solarized theme working in Security Onion:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;sudo apt-get install gnome-terminal&lt;/span&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;I&#39;m sure there&#39;s a way to get in working in the default xfce4 terminal, but I couldn&#39;t figure it out. &lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Follow instructions here: &lt;a href=&quot;http://stackoverflow.com/questions/23118916/configuring-solarized-colorscheme-in-gnome-terminal-tmux-and-vim&quot;&gt;http://stackoverflow.com/questions/23118916/configuring-solarized-colorscheme-in-gnome-terminal-tmux-and-vim&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
                <link>http://jayswan.github.io/2015/01/15/pleasing-terminal-colors-on-security</link>
                <guid>http://jayswan.github.io/2015/01/15/pleasing-terminal-colors-on-security</guid>
                <pubDate>Thu, 15 Jan 2015 15:17:00 -0700</pubDate>
        </item>

        <item>
                <title>Problems with kvm-ok in VIRL with VMWare Player</title>
                <description>I&#39;m installing Cisco VIRL, and despite following the instructions regarding nested virtualization settings, the kvm-ok command was still complaining. I needed to edit the .vmx file for the VIRL VM and add/edit the following:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;monitor.virtual_mmu = &quot;hardware&quot;&lt;br /&gt;monitor.virtual_exec = &quot;hardware&quot;&lt;br /&gt;vhv.enable = &quot;TRUE&quot;&lt;br /&gt;monitor_control.restrict_backdoor = &quot;true&quot;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;nbsp;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;nbsp;&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://jayswan.github.io/2015/01/08/problems-with-kvm-ok-in-virl-with</link>
                <guid>http://jayswan.github.io/2015/01/08/problems-with-kvm-ok-in-virl-with</guid>
                <pubDate>Thu, 08 Jan 2015 15:21:00 -0700</pubDate>
        </item>

        <item>
                <title>My Network Toolkit</title>
                <description>A while back, Chris Marget of &lt;a href=&quot;http://www.fragmentationneeded.net/&quot; target=&quot;_blank&quot;&gt;Fragmentation Needed&lt;/a&gt; posted a run-down of his comprehensive and extremely clever &lt;a href=&quot;http://www.fragmentationneeded.net/2013/07/network-toolkit.html&quot; target=&quot;_blank&quot;&gt;network toolkit&lt;/a&gt;. Because I&#39;m something of a weight weenie, mine is a lot more slimmed down. I thought I&#39;d post it here:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-8Su5hOdyeTA/VKbVoliPWXI/AAAAAAAAAFI/bAU07Xw1F6Y/s1600/toolkit.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-8Su5hOdyeTA/VKbVoliPWXI/AAAAAAAAAFI/bAU07Xw1F6Y/s1600/toolkit.jpg&quot; height=&quot;239&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The contents:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Two random USB drives (in case I need to leave one with somebody).&lt;/li&gt;&lt;li&gt;Single-mode and multi-mode LC fiber loopback plugs.&lt;/li&gt;&lt;li&gt;Rack PDU plug adapter.&lt;/li&gt;&lt;li&gt;Awesome PicQuic compact screwdriver (thanks to Chris&#39;s post).&lt;/li&gt;&lt;li&gt;T1 loopback plug (red) (because we still have T1s out here in the boonies).&lt;/li&gt;&lt;li&gt;Cat-6 pass-through plug (white).&lt;/li&gt;&lt;li&gt;Crossover adapter (orange).&lt;/li&gt;&lt;li&gt;Sharpie.&lt;/li&gt;&lt;li&gt;Console setup:&lt;/li&gt;&lt;ol&gt;&lt;li&gt;USB-to-DB9 adapter.&lt;/li&gt;&lt;li&gt;DB9-to-RJ45 adapter.&lt;/li&gt;&lt;li&gt;Flat Cat-6 cable.&lt;/li&gt;&lt;li&gt;Rollover adapter.&lt;/li&gt;&lt;li&gt;Velcro tie&lt;/li&gt;&lt;li&gt;Flat Cat-6 cable with velcro tie.&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;The console setup could probably be improved by adding a DB9 null-modem adapter. The coolest thing (IMO) that I&#39;m missing from Chris&#39;s setup is the Bluetooth console adapter -- maybe one day. &lt;br /&gt;&lt;br /&gt;The Fenix AA light and Leatherman Skeletool CX almost always live in a pocket rather than the kit and go with me everywhere. The kit all fits into a small zippered case that used to hold a Dell laptop power supply.&lt;br /&gt;&lt;br /&gt;My main goal here was to have all the hard-to-find professional stuff in one small package. I have a separate &quot;personal&quot; kit that contains stuff like headphones, USB cables, and chargers for personal electronics.</description>
                <link>http://jayswan.github.io/2015/01/02/my-network-toolkit</link>
                <guid>http://jayswan.github.io/2015/01/02/my-network-toolkit</guid>
                <pubDate>Fri, 02 Jan 2015 10:45:00 -0700</pubDate>
        </item>

        <item>
                <title>Imposing Artificial Limitations to Develop Skills</title>
                <description>I&#39;m a big fan of imposing artificial limitations on yourself in order to aid skill development. Here are some quick ideas:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;When troubleshooting network devices from the CLI, try not to look at the configuration. Use only &quot;show&quot; or &quot;debug&quot; commands instead. I found this enormously beneficial when practicing for CCIE.&lt;/li&gt;&lt;li&gt;When troubleshooting larger operational issues or learning a new environment, try not to log into individual devices at all. Force yourself to use only your network management system, NetFlow, packet captures, or host-based tools like ping, traceroute, or nmap.&lt;/li&gt;&lt;li&gt;When learning automation or orchestration skills, force yourself to write scripts, run API calls, or use your favorite orchestration tool to do simple things, even if it doesn&#39;t seem like they merit the extra effort.&lt;/li&gt;&lt;/ul&gt;</description>
                <link>http://jayswan.github.io/2014/12/05/imposing-artificial-limitations-to</link>
                <guid>http://jayswan.github.io/2014/12/05/imposing-artificial-limitations-to</guid>
                <pubDate>Fri, 05 Dec 2014 08:49:00 -0700</pubDate>
        </item>

        <item>
                <title>Simple Python Syslog Counter</title>
                <description>Recently I did a &lt;a href=&quot;http://packetpushers.net/show-192-logging-design-best-practices/&quot; target=&quot;_blank&quot;&gt;Packet Pushers episode about log management&lt;/a&gt;. In it, I mentioned some of the custom Python scripts that I run to do basic syslog analysis, and someone asked about them in the comments.&lt;br /&gt;&lt;br /&gt;The script I&#39;m presenting here isn&#39;t one of the actual ones that I run in production, but it&#39;s close. The real one sends emails, does DNS lookups, keeps a &quot;rare messages&quot; database using sqlite3, and a few other things, but I wanted to keep this simple.&lt;br /&gt;&lt;br /&gt;One of the problems I see with getting started with log analysis is that people tend to approach it like a typical vendor RFP project: list some requirements, survey the market, evaluate and buy a product to fit your requirements. Sounds good, right? The problem with log analysis is that often you don&#39;t know what your requirements really are until you start looking at data.&lt;br /&gt;&lt;br /&gt;A simple message counting script like this lets you look at your data, and provides a simple platform on which you can start to iterate to find your specific needs. It also lets us look at some cool Python features.&lt;br /&gt;&lt;br /&gt;I don&#39;t recommend pushing this too far: once you have a decent idea of what your data looks like and what you want to do with it, set up &lt;a href=&quot;http://logstash.net/&quot; target=&quot;_blank&quot;&gt;Logstash&lt;/a&gt;, &lt;a href=&quot;http://graylog2.com/&quot; target=&quot;_blank&quot;&gt;Graylog2&lt;/a&gt;, or a similar commercial product like Splunk (if you can afford it).&lt;br /&gt;&lt;br /&gt;That said, &lt;a href=&quot;https://gist.github.com/jayswan/96df3f0b9606f2ce84f2&quot; target=&quot;_blank&quot;&gt;here&#39;s the Python&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/jayswan/96df3f0b9606f2ce84f2.js&quot;&gt;&lt;/script&gt; I tried to make this as self-documenting as possible. You run it from the CLI with a syslog file as the argument, and you get this:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;$ python simple_syslog_count.py sample.txt&lt;br /&gt;&amp;nbsp;214&amp;nbsp;&amp;nbsp; SEC-6-IPACCESSLOGP&lt;br /&gt;&amp;nbsp;15&amp;nbsp;&amp;nbsp;&amp;nbsp; SEC-6-IPACCESSLOGRL&lt;br /&gt;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp; LINEPROTO-5-UPDOWN&lt;br /&gt;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp; LINK-3-UPDOWN&lt;br /&gt;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; USER-3-SYSTEM_MSG&lt;br /&gt;&amp;nbsp;4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; STACKMGR-4-STACK_LINK_CHANGE&lt;br /&gt;&amp;nbsp;4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DUAL-5-NBRCHANGE&lt;br /&gt;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IPPHONE-6-UNREGISTER_NORMAL&lt;br /&gt;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; CRYPTO-4-PKT_REPLAY_ERR&lt;br /&gt;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SEC-6-IPACCESSLOGRP&lt;br /&gt;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SEC-6-IPACCESSLOGSP&lt;br /&gt;&amp;nbsp;2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SSH-5-SSH2_USERAUTH&lt;br /&gt;&amp;nbsp;2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SSH-5-SSH2_SESSION&lt;br /&gt;&amp;nbsp;2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SSH-5-SSH2_CLOSE&lt;br /&gt;&lt;br /&gt;10.1.16.12&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SEC-6-IPACCESSLOGP&lt;br /&gt;&lt;br /&gt;10.1.24.3&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LINEPROTO-5-UPDOWN&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LINK-3-UPDOWN&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;[Stuff deleted for brevity]&lt;br /&gt;&lt;br /&gt;For Pythonistas, the script makes use of a few cool language features:&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;h3&gt;Named, Compiled rRgexes&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;We can name a regex match with the&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;(?P&lt;yourname&gt;PATTERN)&lt;/yourname&gt;&lt;/span&gt; syntax, which makes it easy to understand it when it&#39;s referenced later with the &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;.group(&#39;&lt;yourname&gt;&#39;) &lt;/yourname&gt;&lt;/span&gt;method on the match object.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;s&quot;&gt;This is demonstrated in lines 36-39 and 58-59 of the gist shown above.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;s&quot;&gt;It would be more efficient to capture these fields by splitting the line with the .split() string method, but I wanted the script to work for unknown field positions -- hence the regex.&amp;nbsp;&lt;/span&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Multiplication of Strings&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;We control indentation by multiplying the &#39; &#39; string (that a single space enclosed in quotes) by an integer value in the print_counter function (line 50).&lt;/li&gt;&lt;ul&gt;&lt;li&gt;The reason this works is that the Python &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;str&lt;/span&gt; class defines a special &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;__mul__ &lt;/span&gt;method that controls how the * operator works for objects of that class:&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;foo&#39;.__mul__(3)&lt;br /&gt;&#39;foofoofoo&#39;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; &#39;foo&#39; * 3&lt;br /&gt;&#39;foofoofoo&#39;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h3&gt;collections.Counter Objects&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Counter objects are a subclass of dictionaries that know how to count things. Jeremy Schulman talked about these in a comment on the &lt;a href=&quot;http://unroutable.blogspot.com/2014/06/python-sets-handy-for-network-data.html&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;. Here, we use Counters to build both the overall message counts and the per-device message counts:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; my_msg = &#39;timestamp ip_address stuff %MY-4-MESSAGE:other stuff&#39;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; CISCO_MSG = re.compile(&#39;%(?P&lt;msg&gt;.*?):&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; test_counter = Counter()&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; this_msg = re.search(CISCO_MSG,my_msg).group(&#39;msg&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; this_msg&lt;br /&gt;&#39;MY-4-MESSAGE&#39;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; test_counter[this_msg] += 1&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; test_counter&lt;br /&gt;Counter({&#39;MY-4-MESSAGE&#39;: 1}) &lt;/msg&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;/ul&gt;&lt;h3&gt;collections.defaultdict Dictionaries&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;It could get annoying when you&#39;re assigning dictionary values inside a loop, because you get errors when the key doesn&#39;t exist yet. This is a contrived example, but it illustrates the point:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; reporters = {}&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; for reporter in [&#39;1.1.1.1&#39;,&#39;2.2.2.2&#39;]:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append[&#39;foo&#39;]&lt;br /&gt;... &lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;&amp;nbsp; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;&lt;br /&gt;KeyError: &#39;1.1.1.1&#39;&lt;/module&gt;&lt;/stdin&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;To fix this, you can catch the exception:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; reporters = {}&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; for reporter in [&#39;1.1.1.1&#39;,&#39;2.2.2.2&#39;]:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append[&#39;foo&#39;]&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append[&#39;bar&#39;]&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; except KeyError:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter] = [&#39;foo&#39;]&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append(&#39;bar&#39;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;As usual, though, Python has a more elegant way in the &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;collections&lt;/span&gt; module: &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;defaultdict&lt;/span&gt; &lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; reporters = defaultdict(list)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; for reporter in [&#39;1.1.1.1&#39;,&#39;2.2.2.2&#39;]:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append(&#39;foo&#39;)&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reporters[reporter].append(&#39;bar&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; reporters&lt;br /&gt;defaultdict(&lt;type list=&quot;&quot;&gt;, {&#39;1.1.1.1&#39;: [&#39;foo&#39;, &#39;bar&#39;], &#39;2.2.2.2&#39;: [&#39;foo&#39;, &#39;bar&#39;]})&lt;/type&gt;&lt;/span&gt;&lt;/blockquote&gt;In the syslog counter script, we use a &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;collections.Counter&lt;/span&gt; object as the type for our defaultdict. This allows us to build a per-syslog-reporter dictionary that shows how many times each message appears for each reporter, while only looping through the input once (line 66):&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;nbsp;per_reporter_counts[reporter][msg] += 1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Here, the dictionary &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;per_reporter_counts&lt;/span&gt; has the IPv4 addresses of the syslog reporters as keys, with a &lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;Counter&lt;/span&gt; object as the value holding the counts for each message type:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter,defaultdict&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; per_reporter_counts = defaultdict(Counter)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; per_reporter_counts[&#39;1.1.1.1&#39;][&#39;SOME-5-MESSAGE&#39;] += 1&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; per_reporter_counts&lt;br /&gt;defaultdict(&lt;class collections.counter=&quot;&quot;&gt;, {&#39;1.1.1.1&#39;: Counter({&#39;SOME-5-MESSAGE&#39;: 1})})&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; per_reporter_counts[&#39;1.1.1.1&#39;][&#39;SOME-5-MESSAGE&#39;] += 5&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; per_reporter_counts&lt;br /&gt;defaultdict(&lt;class collections.counter=&quot;&quot;&gt;, {&#39;1.1.1.1&#39;: Counter({&#39;SOME-5-MESSAGE&#39;: 6})})&lt;/class&gt;&lt;/class&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;If you got this far, you can go implement it for IPv6 addresses. :-)</description>
                <link>http://jayswan.github.io/2014/07/01/simple-python-syslog-counter</link>
                <guid>http://jayswan.github.io/2014/07/01/simple-python-syslog-counter</guid>
                <pubDate>Tue, 01 Jul 2014 19:24:00 -0600</pubDate>
        </item>

        <item>
                <title>Python Sets: Handy for Network Data</title>
                <description>My Python-related posts seem to get the most reads, so here&#39;s another one!&lt;br /&gt;&lt;br /&gt;A problem that comes up fairly often in networking is finding the number of occurrences of unique items in a large collection of data: let&#39;s say you want to find all of the unique IP addresses that accessed a website, traversed a firewall, got denied by an ACL, or whatever. Maybe you&#39;ve extracted the following list from a log file:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;1.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;2.2.2.2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;3.3.3.3&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;1.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;5.5.5.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;5.5.5.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;1.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;2.2.2.2 &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;and you need to reduce this to:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;1.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;2.2.2.2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;3.3.3.3&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;5.5.5.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In other words, we&#39;re removing the duplicates. In low-level programming languages, removing duplicates is a bit of a pain: generally you need to implement an efficient way to sort an array of items, then traverse the sorted array to check for adjacent duplicates and remove them. In a language that has dictionaries (also known as hash tables or associative arrays), you can do it by adding each item as a key in your dictionary with an empty value, then extract the keys. In Python:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; items = [&#39;1.1.1.1&#39;,&#39;2.2.2.2&#39;,&#39;3.3.3.3&#39;,&#39;1.1.1.1&#39;,&#39;5.5.5.5&#39;,&#39;5.5.5.5&#39;,&#39;1.1.1.1&#39;,&#39;2.2.2.2&#39;]&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; d = {}&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; for item in items:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; d[item] = None&lt;br /&gt;...&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; d&lt;br /&gt;{&#39;5.5.5.5&#39;: None, &#39;3.3.3.3&#39;: None, &#39;1.1.1.1&#39;: None, &#39;2.2.2.2&#39;: None}&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; unique = d.keys()&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; unique&lt;br /&gt;[&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;or, more concisely using a dictionary comprehension:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; {item:None for item in items}.keys()&lt;br /&gt;[&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Python has an even better way, however: the &quot;set&quot; type, which emulates the mathematical idea of a set as a collection of distinct items. If you create an empty set and add items to it, duplicates will automatically be thrown away:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s = set()&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s.add(&#39;1.1.1.1&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s&lt;br /&gt;set([&#39;1.1.1.1&#39;])&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s.add(&#39;2.2.2.2&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s.add(&#39;1.1.1.1&#39;)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s&lt;br /&gt;set([&#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;])&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; for item in items:&lt;br /&gt;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; s.add(item)&lt;br /&gt;...&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; s&lt;br /&gt;set([&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Predictably, you can use set comprehensions just like list comprehensions to do the same thing as a one liner:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; {item for item in items}&lt;br /&gt;set([&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Or, if you have a list built already you can just convert it to a set:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; set(items)&lt;br /&gt;set([&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Python also provides methods for the most common types of set operations: union, intersection, difference and symmetric difference. Because these methods accept lists or other iterables, you can quickly find similarities between collections of items:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; items&lt;br /&gt;[&#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;, &#39;3.3.3.3&#39;, &#39;1.1.1.1&#39;, &#39;5.5.5.5&#39;, &#39;5.5.5.5&#39;, &#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;]&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; more_items = [&#39;1.1.1.1&#39;,&#39;8.8.8.8&#39;,&#39;1.1.1.1&#39;,&#39;7.7.7.7&#39;,&#39;2.2.2.2&#39;]&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; set(items).intersection(more_items)&lt;br /&gt;set([&#39;1.1.1.1&#39;, &#39;2.2.2.2&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; set(items).difference(more_items)&lt;br /&gt;set([&#39;5.5.5.5&#39;, &#39;3.3.3.3&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Have fun!&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://jayswan.github.io/2014/06/20/python-sets-handy-for-network-data</link>
                <guid>http://jayswan.github.io/2014/06/20/python-sets-handy-for-network-data</guid>
                <pubDate>Fri, 20 Jun 2014 10:55:00 -0600</pubDate>
        </item>

        <item>
                <title>Fun with Router IP Traffic Export and NSM</title>
                <description>&lt;i&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Basics &lt;/span&gt;&lt;/i&gt;&lt;br /&gt;I finally got around to setting up &lt;a href=&quot;http://blog.securityonion.net/&quot; target=&quot;_blank&quot;&gt;Security Onion&lt;/a&gt; (the best network security monitoring package available) to monitor my home network, only to discover that my Cisco 891 router doesn&#39;t support support the right form of SPAN. Here&#39;s how I worked around it. The topology looks like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-m46uHdW4ROg/Uzsrvbx5yrI/AAAAAAAAAEM/jd8x3WpHfxg/s1600/lab.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-m46uHdW4ROg/Uzsrvbx5yrI/AAAAAAAAAEM/jd8x3WpHfxg/s1600/lab.png&quot; height=&quot;328&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;The 891 router has an integrated 8-port switch module, so the simple case would have been a traditional SPAN setup; something like this:&lt;br /&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace; font-size: small;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;! vlan 10 is the user VLAN&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace; font-size: small;&quot;&gt;monitor session 1 source interface vlan 10 &lt;!------&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace; font-size: small;&quot;&gt;monitor session 1 destination interface FastEthernet0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;with the server&#39;s monitoring NIC connected to FastEthernet0.&lt;br /&gt;&lt;br /&gt;The problem is that the 891 doesn&#39;t support using a VLAN as a source interface, and because of the way the embedded WAP works, a physical source interface won&#39;t work either. Hence, I turned to an obscure feature that&#39;s helped me occasionally in the past: &lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/ios-xml/ios/sec_usr_cfg/configuration/15-mt/sec-usr-cfg-15-mt-book/sec-ip-traff-export.html&quot; target=&quot;_blank&quot;&gt;Router IP Traffic Export&lt;/a&gt;. This is a feature for IOS software platforms that enables you to enable SPAN-like functions for almost any source interface.&lt;br /&gt;&lt;br /&gt;The configuration looks like this:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;ip traffic-export profile RITE_MIRROR&lt;br /&gt;&amp;nbsp; interface FastEthernet0&lt;br /&gt;&amp;nbsp; bidirectional&lt;br /&gt;&amp;nbsp; mac-address 6805.ca21.2ddd&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;interface Vlan10&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&quot;&gt;&amp;nbsp;ip traffic-export apply RITE_MIRROR&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This takes all traffic routed across the Vlan10 SVI and sends it out the FastEthernet0 interface, rewriting the destination MAC address to the specified value. I used the MAC address of my monitoring NIC, but it shouldn&#39;t matter in this case because the monitoring NIC is directly attached. If I wanted to copy the traffic across a switched interface, it would matter.&lt;br /&gt;&lt;br /&gt;My ESXi host (a low-cost machine from &lt;a href=&quot;https://zareason.com/&quot; target=&quot;_blank&quot;&gt;Zareason&lt;/a&gt; with 32GB of RAM) has two physical NICs; one for all of the regular VM traffic (using 802.1q to separate VLANs if needed) and one for monitoring. The monitoring pNIC is attached to a promiscuous mode vSwitch in ESXi, which in turn is connected to the monitoring vNIC on the Security Onion VM. The effect of this is identical to SPAN-ing all the traffic from VLAN 10 to my Security Onion monitoring system; I get Snort, Bro, Argus, and full packet capture with just the built-in software tools in IOS and ESXi.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;i&gt;Oddity: RITE Capture, Tunnels?&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;Interestingly, you can also use RITE to &lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/ios/12_4t/12_4t11/ht_rawip.html#wp1051438&quot; target=&quot;_blank&quot;&gt;capture traffic to a RAM buffer and export it to a pcap file&lt;/a&gt;. I don&#39;t understand why you would use this instead of the much more flexible &lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/ios-xml/ios/epc/configuration/15-mt/epc-15-mt-book/nm-packet-capture.html&quot; target=&quot;_blank&quot;&gt;Embedded Packet Capture Feature&lt;/a&gt;, though.&lt;br /&gt;&lt;br /&gt;Another thing I&#39;ve wondered is whether you could use a L2 tunnel to send the mirrored traffic elsewhere in the network. The destination interface must be a physical Ethernet interface, but it would be interesting to try using a L2TPv3 tunnel from an Ethernet interface to another router--I have no idea if this would work. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Production Use?&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;Cisco makes the &lt;a href=&quot;http://www.cisco.com/c/dam/en/us/products/collateral/servers-unified-computing/ucs-e-series-servers/data_sheet_c78-705787.pdf&quot; target=&quot;_blank&quot;&gt;UCS E-series blades&lt;/a&gt; for ISR G2 routers that let you run a hypervisor on a blade inside your router chassis. These things have an external Ethernet port on them, so you should be able to connect a RITE export interface to the external port on an E-series blade, and run Security Onion inside your router. I&#39;ve always wanted to try this, but I haven&#39;t been able to get funding yet to test it.</description>
                <link>http://jayswan.github.io/2014/04/02/fun-with-router-ip-traffic-export-and</link>
                <guid>http://jayswan.github.io/2014/04/02/fun-with-router-ip-traffic-export-and</guid>
                <pubDate>Wed, 02 Apr 2014 09:54:00 -0600</pubDate>
        </item>

        <item>
                <title>Quick Thoughts on the Micro Data Center</title>
                <description>Here&#39;s something that&#39;s been on my radar lately: while all the talk in the networking world seems to be about the so-called &quot;massively scalable&quot; data center, almost all of the people I talk to in my world are dealing with the fact that data centers are rapidly getting smaller due to virtualization efficiencies. This seems to be the rule rather than the exception for small-to-medium sized enterprises.&lt;br /&gt;&lt;br /&gt;In the micro data center that sits down the hall from me, for example, we&#39;ve gone from 26 physical servers to 18 in the last few months, and we&#39;re scheduled to lose several more as older hypervisor hosts get replaced with newer, denser models. I suspect we&#39;ll eventually stabilize at around a dozen physical servers hosting in the low hundreds of VMs. We could get much denser, but things like political boundaries inevitably step in to keep the count higher than it might be otherwise. The case is similar in our other main facility.&lt;br /&gt;&lt;br /&gt;From a networking perspective, this is interesting: I&#39;ve heard vendor and VAR account managers remark lately that virtualization is cutting into their hardware sales. I&#39;m most familiar with Cisco&#39;s offerings, and at least right now they don&#39;t seem to be looking at the micro-DC market as a niche: high-port count switches are basically all that are available. Cisco&#39;s design guide for the small-to-medium data center starts in the 100-300 10GE port range, which with modern virtualization hosts will support quite a few thousand typical enterprise VMs.&lt;br /&gt;&lt;br /&gt;Having purchased the bulk of our older-generation servers before 10GE was cheap, we&#39;re just getting started with 10GE to the server access layer. Realistically, within a year or so a pair of redundant, reasonably feature-rich 24-32 port 10GE switches will be all we need for server access, probably in 10GBASE-T. Today, my best Cisco option seems to be the Nexus 9300 series, but it still has a lot of ports I&#39;ll never use.&lt;br /&gt;&lt;br /&gt;One thought I&#39;ve had is to standardize on the Catalyst 4500-X for all DC, campus core, and campus distribution use. With VSS, the topologies are simple. The space, power, and cooling requirements are minimal, and the redundancy is there. It has good layer 3 capabilities, along with excellent SPAN and NetFlow support. The only thing it seems to be lacking today is an upgrade path to 40GE, but that may be acceptable in low-port-density environments. Having one platform to manage would be nice. The drawbacks, of course, are a higher per-port cost and lack of scalability -- but again, scalability isn&#39;t really the problem.&lt;br /&gt;&lt;br /&gt;Comments welcome.</description>
                <link>http://jayswan.github.io/2014/03/21/quick-thoughts-on-micro-data-center</link>
                <guid>http://jayswan.github.io/2014/03/21/quick-thoughts-on-micro-data-center</guid>
                <pubDate>Fri, 21 Mar 2014 16:04:00 -0600</pubDate>
        </item>

        <item>
                <title>Packet Capture in Diverse / Tunneled Networks?</title>
                <description>(With the usual caveats that I am just a hick from Colorado, I don&#39;t know what I&#39;m talking about, etc.)&lt;br /&gt;&lt;br /&gt;I just read &lt;a href=&quot;http://netcraftsmen.net/component/easyblog/blogger/listings/pwelcher.html?Itemid=374&quot; target=&quot;_blank&quot;&gt;Pete Welcher&#39;s superb series&lt;/a&gt; on NSX, DFA, ACI, and other SDN stuff on the &lt;a href=&quot;http://netcraftsmen.net/blogs.html&quot; target=&quot;_blank&quot;&gt;Chesapeake Netcraftsmen&lt;/a&gt; blog, and it helped me think more clearly about a problem that&#39;s been bothering me for a long time: how do we do realistically scalable packet capture in networks that make extensive use of ECMP and/or tunnels? Here&#39;s a sample network that Pete used:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://netcraftsmen.net/images/stories/71/20140103-figure1.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://netcraftsmen.net/images/stories/71/20140103-figure1.jpg&quot; height=&quot;211&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Conventionally, we place packet capture devices at choke points in the network. But in medium-to-large data center designs, one of the main goals is to eliminate choke points: if we assume this is a relatively small standard ECMP leaf-spine design, each of the leaf switches has four equal-cost routed paths through the spine switches, and each spine switch has at least as many downlinks as there are leaf switches. The hypervisors each have two physical paths to the leaf switches, and in a high-density virtualization design we probably don&#39;t have a very good idea of what VM resides on what hypervisor at any point in time.&lt;br /&gt;&lt;br /&gt;Now, add to that the tunneling features present in hypervisor-centric network virtualization schemes: traffic between two VMs attached to different hypervisors is tunneled inside VXLAN, GRE, or STT packets, depending on how you have things set up. The source and destination IP addresses of the &quot;outer&quot; hypervisor-to-hypervisor packet are not the sample as the &quot;inner&quot; VM-to-VM addresses, and presumably it&#39;s the latter that interest us. Thus, it&#39;s hard to even figure out which packets to capture. If we capture all of them (hard at any kind of scale; good 10G line-rate capture is still expensive and troublesome), we still have to filter for the inner tunnel headers to figure out what we&#39;re looking at.&lt;br /&gt;&lt;br /&gt;What can we do? I see a few options:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Put a huge mirror/tap switch between the leaf and spine. Gigamon makes some big ones, with up to 64 x 40GE ports or 256 x 10GE ports. When you max those out, start putting them at the end of each row. They advertise the ability to pop all kinds of different tunnel headers in hardware, along with lots of cool filtering and load-balancing capabilities.&lt;/li&gt;&lt;li&gt;Buy or roll-your-own rack-mount packet capture appliances on commodity hardware, and run ad hoc SPAN sessions to them from the leaf switches.&lt;/li&gt;&lt;li&gt;Install hypervisor-based packet capture VMs on all your hypervisors and capture from promiscuous mode vSwitches. There are lots of commercial solutions here, or you could roll your own. Update: &lt;a href=&quot;https://twitter.com/pjwelcher&quot; target=&quot;_blank&quot;&gt;Pete Welcher&lt;/a&gt; responded on Twitter and mentioned the option of doing packet capture pre-tunnel-encap or post-tunnel-decap. That&#39;s originally what I was thinking of with this option, but after reviewing a couple of his posts again, it appears there may be scenarios where the hypervisor makes tunnels to itself, so a better way of doing it might be to implement a packet capture API in the hypervisor itself that can control the point in the tunnel chain where the capture takes place. The next question is: where do we retrieve the capture? Does the API send the capture to a VM, save it on a datastore, dump it to a physical port, send it via another tunnel akin to ERSPAN? I&#39;d want multiple options.&lt;/li&gt;&lt;li&gt;Make sure Wireshark, tshark, or tcpdump is installed on every VM.&lt;/li&gt;&lt;li&gt;Give up on intra-DC capture and focus only at the ingress/egress points. &lt;/li&gt;&lt;/ol&gt;Option 1 is the only one that really confronts both the network diversity and tunnel encapsulation head-on. Those boxes and their administrative overhead don&#39;t come cheap, but today this is probably the most fiddle-free option. The other options require a lot of customization and manual intervention that may or may not interfere with change-control procedures, and don&#39;t provide obvious solutions for de-obfuscating the tunneled traffic. Option 2 also suffers from serious scalability problems in ECMP designs. Option 5 just avoids the problem, but might work for some people.&lt;br /&gt;&lt;br /&gt;However, the whole point of these designs is &quot;SDN&quot;. What I *hope* is going to happen as SDN controllers start to become available is that the controller will be sufficiently aware of VM location that it can instruct the appropriate vSwitch OR leaf-switch OR spine switch to copy packets that meet a certain set of criteria to a particular destination port. Call it super-SPAN (can you tell I&#39;m not headed for a new career in product naming?). It would be nice to be able to define the copied packets in different ways:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Conventional L3/L4 5-tuple. This would be nice because it could be informed by NetFlow/IPFIX data, without the need for DPI on the flow-exporter.&lt;/li&gt;&lt;li&gt;VM DNS name, port profile, or parent hypervisor.&lt;/li&gt;&lt;li&gt;QoS class.&lt;/li&gt;&lt;li&gt;&quot;Application profile&quot; -- it remains to be seen exactly what this means, but this is one of those SDN holy-grail things that allows more granular definition of traffic types.&lt;/li&gt;&lt;/ul&gt;Finally, it would be nice if the controller was smart enough to be able to load-balance the copied packets when necessary, so that the same capture target sees both sides of a given flow.&lt;br /&gt;&lt;br /&gt;Again, I know nothing about plans for this stuff from any vendor. But I hope the powers-that-be in the SDN/etc world are thinking about at least some of these kinds of capabilities.&lt;br /&gt;&lt;br /&gt;And... about the time they get that all figured out, we&#39;ll have to be dealing with a bunch of that traffic being encrypted between VMs or hypervisors... </description>
                <link>http://jayswan.github.io/2014/03/05/packet-capture-in-diverse-tunneled</link>
                <guid>http://jayswan.github.io/2014/03/05/packet-capture-in-diverse-tunneled</guid>
                <pubDate>Wed, 05 Mar 2014 20:26:00 -0700</pubDate>
        </item>

        <item>
                <title>Programmatically Configuring Interface Descriptions from Phone Descriptions</title>
                <description>I wrote some Python code that allows you to do the following:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Query a Catalyst switch CDP neighbor table from its HTTPS interface,&lt;/li&gt;&lt;li&gt;Extract the device names of the attached IP phones,&lt;/li&gt;&lt;li&gt;Query Communications Manager for the IP phone device description,&amp;nbsp;&lt;/li&gt;&lt;li&gt;Apply the device description as the switch interface description.&lt;/li&gt;&lt;/ol&gt;Obviously, this makes it much easier to see whose phone is attached to a switch port.&lt;br /&gt;&lt;br /&gt;I hope that this example saves someone the head-banging that I incurred while trying to figure out the AXL XML/SOAP API for Communications Manager.&lt;br /&gt;&lt;br /&gt;I haven&#39;t tested this extensively; all my testing has been on Catalyst 3560 and 3750 switches and CUCM version 8.6. Using the --auto switch to automatically configure the switch is quite slow; this is a limitation of the HTTPS interface rather than the script code. It may be faster to leave that option off and manually copy/paste the printed configuration if you&#39;re in a hurry.&lt;br /&gt;&lt;br /&gt;Note that your switch must be configured to allow configuration via the HTTPS interface; you may need to modify your TACACS/etc. configurations accordingly.&lt;br /&gt;&lt;br /&gt;All the relevant info is in the &lt;a href=&quot;https://github.com/jayswan/cdp_cucm&quot; target=&quot;_blank&quot;&gt;Github repo&lt;/a&gt;.</description>
                <link>http://jayswan.github.io/2014/02/14/programatically-configuring-interface</link>
                <guid>http://jayswan.github.io/2014/02/14/programatically-configuring-interface</guid>
                <pubDate>Fri, 14 Feb 2014 15:05:00 -0700</pubDate>
        </item>

        <item>
                <title>Why Network Engineers Should Learn Programming</title>
                <description>Because Microsoft Excel is not a text editor. Seriously.&lt;br /&gt;&lt;br /&gt;This is a followup to the previous post, inspired by Ethan Banks of &lt;a href=&quot;http://packetpushers.net/&quot; target=&quot;_blank&quot;&gt;Packet Pushers&lt;/a&gt;. If you do operational networking at all, you deal with text files all the time: logs, debug output, configuration files, command line diagnostics, and more.&amp;nbsp;I&#39;m constantly amazed when I see people open Word or Excel to do their text editing, often one keystroke at a time.&lt;br /&gt;&lt;br /&gt;The number one reason to learn basic programming is to automate that stuff. Personally, I use a combination of traditional Unix shell tools and Python to get the job done, but you could probably do it all with one or the other.&lt;br /&gt;&lt;br /&gt;There are lots of other reasons to learn programming too, many of which will be discussed on an upcoming Packet Pushers episode. But if you don&#39;t believe any of those, this one alone makes it worth the effort.&lt;br /&gt;&lt;br /&gt;Step away from the spreadsheet. Do it now.</description>
                <link>http://jayswan.github.io/2014/01/20/why-network-engineers-should-learn</link>
                <guid>http://jayswan.github.io/2014/01/20/why-network-engineers-should-learn</guid>
                <pubDate>Mon, 20 Jan 2014 11:07:00 -0700</pubDate>
        </item>

        <item>
                <title>Quick Thoughts on Learning Python</title>
                <description>I was scheduled to be a guest on an upcoming episode of the Packet Pushers podcast, on the topic of Python for network engineers. Unfortunately due to bad luck I&#39;m not going to be able to make the recording. Here are some quick thoughts on learning Python. If you&#39;re already an expert programmer you already know how to learn languages, so this post isn&#39;t for you.&lt;br /&gt;&lt;br /&gt;Scenario 1: You&#39;ve coded in another language, but you&#39;re not an expert.&lt;br /&gt;I would start with the basic Python class at &lt;a href=&quot;https://developers.google.com/edu/python/?csw=1&quot; target=&quot;_blank&quot;&gt;Google Code&lt;/a&gt;. It&#39;s targeted specifically at people who know basic programming skills in some other language. It was perfect for me; I went through the exercises and was able to quickly start writing simple, useful Python scripts.&lt;br /&gt;&lt;br /&gt;Scenario 2: You don&#39;t know how to write code at all.&lt;br /&gt;Start with the &lt;a href=&quot;https://www.udacity.com/course/cs101&quot; target=&quot;_blank&quot;&gt;Udacity CS101&lt;/a&gt; class if you like guided learning, or &lt;a href=&quot;http://learnpythonthehardway.org/&quot; target=&quot;_blank&quot;&gt;Learn Python the Hard Way&lt;/a&gt; if you prefer books. Be prepared to spend a lot of time on either. It&#39;s not easy the first time around.&lt;br /&gt;&lt;br /&gt;After you&#39;ve gotten through one of those two scenarios, do the following:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Spend time browsing the documentation for the Python Standard Library. Python is a large language, and chances are there&#39;s something in the standard library that will help you meet your goals. If you find yourself writing a lot of lines of code to accomplish something fairly simple, look harder. I recommend skimming the documentation for every module, then looking more carefully at the ones that interest you.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Matt-Harrison/e/B0077BQLH6/ref=ntt_athr_dp_pel_pop_1&quot; target=&quot;_blank&quot;&gt;Matt Harrison&#39;s books&lt;/a&gt; on basic and intermediate Python are excellent. I recommend buying them and reading them.&lt;/li&gt;&lt;li&gt;Jeff Knupp&#39;s &lt;a href=&quot;http://www.jeffknupp.com/writing-idiomatic-python-ebook/&quot; target=&quot;_blank&quot;&gt;Writing Idiomatic Python&lt;/a&gt; is really good as you gain skills. It&#39;s a bit rough around the edges, but it will help you avoid common beginner mistakes and is well worth the read.&lt;/li&gt;&lt;li&gt;Practice a lot. I enjoy the math puzzles on &lt;a href=&quot;http://projecteuler.net/&quot; target=&quot;_blank&quot;&gt;Project Euler&lt;/a&gt;. These are not Python specific, but their structure makes them well suited to quick problem solving in any language. Beware -- it&#39;s very addictive!&lt;/li&gt;&lt;/ol&gt;</description>
                <link>http://jayswan.github.io/2014/01/17/quick-thoughts-on-learning-python</link>
                <guid>http://jayswan.github.io/2014/01/17/quick-thoughts-on-learning-python</guid>
                <pubDate>Fri, 17 Jan 2014 10:14:00 -0700</pubDate>
        </item>


</channel>
</rss>
